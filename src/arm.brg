%{
/*
 * reserva de registos greedy sem spilling.
 * call não faz save do 'r0' porque são sempre instruções e não expressões.

 * some rules do not exist due to hardware limitations:
 * - there are no 'mem' references since it is a load-store machine
 * - stat:ASSIGN(VARIABLE,INTEGER) is done through a register, using other rules
 */
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "tabid.h"

static const char *name[] = { "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7"
#ifndef THUMB
 , "r8", "r9", "r10", "r11", "r12"
#endif
};
#define SP 13
#define LR 14
#define PC 15
#define NREG (sizeof(name)/sizeof(name[0]))
static int busy[NREG];
static int getReg();

extern int lbl;
extern char *mklbl(int n);

static void jcond(Node *p, char *cond) {
  printf(" cmp %s, %s\n %s %s\n",
	  name[PLACE(p->SUB(0)->SUB(0))],
	  name[PLACE(p->SUB(0)->SUB(1))],
	  cond, p->SUB(1)->value.s);
  busy[PLACE(p->SUB(0)->SUB(0))] = 0;
  busy[PLACE(p->SUB(0)->SUB(1))] = 0;
}

static void idiv(int op, Node *p) {
  /* arm does not divide, so we call a rotine */
  int spill = 0;
  if (busy[0] && (PLACE(RIGHT_CHILD(p)) != 0 || PLACE(LEFT_CHILD(p)) != 0)) {
    spill = 1;
    printf(" push {r0}\n"); /* spill return reg if none of the arguments uses it */
  }
  printf(" push {%s}\n push {%s}\n", name[PLACE(RIGHT_CHILD(p))], name[PLACE(LEFT_CHILD(p))]);
  busy[PLACE(LEFT_CHILD(p))]=0;
  busy[PLACE(RIGHT_CHILD(p))]=0;
  PLACE(p) = getReg();
  printf(" b %s\n mov %s, r0\n", op ? "_mod" : "_div", name[PLACE(p)]);
  if (spill) printf(" pop {r0}\n"); /* restore spilled reg */
}

static void binop(char *op, Node *p) {
  PLACE(p)=PLACE(LEFT_CHILD(p));
  printf(" %s %s, %s, %s\n", op, name[PLACE(p)], name[PLACE(LEFT_CHILD(p))],
			  name[PLACE(RIGHT_CHILD(p))]);
  busy[PLACE(RIGHT_CHILD(p))]=0;

static void cmpop(char *op, char *inv, Node *p) {
  PLACE(p)=PLACE(LEFT_CHILD(p));
  printf(" cmp %s, %s\n mov%s %s, #1\n mov%s %s, #0\n",
      name[PLACE(LEFT_CHILD(p))], name[PLACE(RIGHT_CHILD(p))],
      op, PLACE(p), inv, PLACE(p));
  busy[PLACE(RIGHT_CHILD(p))]=0;
}
%}
%term LIST=';' ASSIGN='=' ADD='+' SUB='-' MUL='*' DIV='/' MOD='%' LT='<' GT='>'
%include "y.tab.h"
%%
stat:  LIST(stat,stat)
stat:  STRING 2 { char *l = mklbl(++lbl); printf(".section .rodata\n.align 4\n%s: .asciz \"%s\"\n.section .text\n ldr r0, =%s\n b _prints\n", l, p->value.s, l); }
stat:  PRINT(reg) 3 { printf(" ldr r0, [%s]\n b _printi\n b _println\n", name[PLACE(p)=PLACE(LEFT_CHILD(p))]); busy[PLACE(LEFT_CHILD(p))]=0; }
stat:  READ 3 { printf(" b _readi\n ldr r1, =%s\n str r0, [r1]\n", p->value.s); }
stat:  JZ(reg,ETIQ) 2 {
		printf(" cmp %s, #0\n beq %s\n", name[PLACE(p)=PLACE(LEFT_CHILD(p))],
			p->SUB(1)->value.s);
                busy[PLACE(LEFT_CHILD(p))]=0; /* liberta registo filho 1 */ }
stat:  JNZ(reg,ETIQ) 2 {
		printf(" cmp %s, #0\n bne %s\n", name[PLACE(p)=PLACE(LEFT_CHILD(p))],
			p->SUB(1)->value.s);
                busy[PLACE(LEFT_CHILD(p))]=0; /* liberta registo filho 1 */ }
stat:  JMP 1 { printf(" b %s\n", p->value.s); }
stat:  LABEL { printf("%s:\n", p->value.s); }
stat:  ASSIGN(reg,reg)   2 {
                printf(" str %s, [%s]\n", name[PLACE(RIGHT_CHILD(p))], name[PLACE(LEFT_CHILD(p))]);
                busy[PLACE(RIGHT_CHILD(p))]=0; /* liberta registo filho 1 */ }
stat:   JZ(LT(reg,reg), ETIQ)    2 { jcond(p, "bge"); }
stat:   JZ(LE(reg,reg), ETIQ)    2 { jcond(p, "bg"); }
stat:   JZ(GT(reg,reg), ETIQ)    2 { jcond(p, "ble"); }
stat:   JZ(GE(reg,reg), ETIQ)    2 { jcond(p, "bl"); }
stat:   JZ(EQ(reg,reg), ETIQ)    2 { jcond(p, "bne"); }
stat:   JZ(NE(reg,reg), ETIQ)    2 { jcond(p, "beq"); }
stat:   JNZ(LT(reg,reg), ETIQ)    2 { jcond(p, "bl"); }
stat:   JNZ(LE(reg,reg), ETIQ)    2 { jcond(p, "ble"); }
stat:   JNZ(GT(reg,reg), ETIQ)    2 { jcond(p, "bg"); }
stat:   JNZ(GE(reg,reg), ETIQ)    2 { jcond(p, "bge"); }
stat:   JNZ(EQ(reg,reg), ETIQ)    2 { jcond(p, "beq"); }
stat:   JNZ(NE(reg,reg), ETIQ)    2 { jcond(p, "bne"); }

stat:  reg { busy[PLACE(p)] = 0; /* free reg */ }
reg:   VARIABLE 2 { printf(" ldr %s, =%s\n", name[PLACE(p) = getReg()], p->value.s); }
reg:   INTEGER 2 { printf(" ldr %s, =%d\n", name[PLACE(p) = getReg()], p->value.i); }
reg:   ADD(reg,reg)     1 { binop("add", p); }
reg:   SUB(reg,reg)    1 { binop("sub", p); }
reg:   UMINUS(reg)       1 { PLACE(p)=PLACE(LEFT_CHILD(p));
                printf(" neg %s, %s\n", name[PLACE(p)], name[PLACE(LEFT_CHILD(p))]); }

reg:   MUL(reg,reg)   5 { binop("mul", p); }
reg:   DIV(reg,reg)   25 { idiv(0, p); }
reg:   MOD(reg,reg)   25 { idiv(1, p); }
reg:   EQ(reg,reg)    3 { cmpop("eq", "ne", p); }
reg:   NE(reg,reg)    3 { cmpop("ne", "eq", p); }
reg:   LT(reg,reg)    3 { cmpop("lt", "ge", p); }
reg:   LE(reg,reg)    3 { cmpop("le", "gt", p); }
reg:   GE(reg,reg)    3 { cmpop("ge", "lt", p); }
reg:   GT(reg,reg)    3 { cmpop("gt", "le", p); }
%%
static int getReg()
{
  unsigned int i;

  for(i = 0; i < NREG; i++)
    if (busy[i] == 0) {
      busy[i] = 1;
      return i;
    }
  fprintf(stderr, "Registos esgotados\n");
  return sizeof(busy) + 1;
}

#include "y.tab.h"

extern char **yynames;

static int data(int t, char *s, int a, int user) {
  if (s) printf(" %s: .word 0\n", s);
  return 1;
}

void evaluate(Node *p) {
  int i;
  extern int trace, errors;

  if (errors) return;
  if (trace) printNode(p, stdout, yynames);
  printf(".section .text\n.align 2\n.global _main\n.type_main, %function\n_main:\n");
  for (i = 0; i < p->value.sub.num; i++) {
    if (trace) printNode(p->SUB(i), stdout, yynames);
    yyselect(p->SUB(i));
  }
  printf(" mov r0, #0\n bx lr\n");
  printf(".section .data\n");
  IDevery(data,0);
  printf(".extern _prints\n.extern _printi\n.extern _println\n.extern _readi\n");
}
